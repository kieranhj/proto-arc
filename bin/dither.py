#!/usr/bin/python
import argparse,sys,math,arc

##########################################################################
##########################################################################

def save_file(data,path):
    if path is not None:
        with open(path,'wb') as f:
            f.write(''.join([chr(x) for x in data]))

def word_to_bytes(value):
    return [value & 0xff, (value >> 8) & 0xff, (value >> 16) & 0xff, (value >> 24) & 0xff]

##########################################################################
##########################################################################

dither2 = [ 0, 2, 3, 1]
dither4 = [ 0, 8, 2, 10, 12, 4, 14, 6, 3, 11, 1, 9, 15, 7, 13, 5 ]
dither8 = [ 0, 32, 8, 40, 2, 34, 10, 42, 48, 16, 56, 24, 50, 18, 58, 26, 12, 44, 4, 36, 14, 46, 6, 38, 60, 28, 52, 20, 62, 30, 54, 22, 3, 35, 11,43, 1, 33, 9, 41, 51, 19, 59, 27, 49, 17, 57, 25, 15, 47, 7, 39, 13, 45, 5, 37, 63, 31, 55, 23, 61, 29, 53, 21 ]

def pixels_to_words(pixels, rank, f):
    word = 0
    pos = 0
    for p in pixels:
        word = word | (p * 0xf) << (pos*4)
        pos = pos + 1
        if pos == rank or pos == 8:
            f.write('.long 0x{0:08x}\n'.format(word))
            word = 0
            pos = 0

def dither_to_words(dither, rank, f):
    f.write('; ============================================================================\n')
    f.write('; Dither tables. AUTOGENERATED CODE! DO NOT EDIT!\n')
    f.write('; ============================================================================\n')

    num = rank*rank
    for t in range(0, num+1):
        f.write('dither_{0}:\n'.format(t))
        pixels = []
        for i in range(0, num):
            if t > dither[i]:
                pixels.append(1)
            else:
                pixels.append(0)

        pixels_to_words(pixels, rank, f)

    # f.write('dither_table:\n')
    # for t in range(0, num+1):
    #    f.write('.long dither_{0}\n'.format(t)) # -dither_table

def main(options):
    if options.path is not None:
        with open(options.path, 'w') as f:
            dither_to_words(dither8, 8, f)


##########################################################################
##########################################################################

if __name__=='__main__':
    parser=argparse.ArgumentParser()

    parser.add_argument('-o',dest='path',metavar='FILE',help='output ARC data to %(metavar)s')
    parser.add_argument('index',type=int,help='index of matrix')
    main(parser.parse_args())
